titlePanel("Correlation Between Testing Indicator and COVID-19 Death"),
# Main panel for displaying outputs
mainPanel(
plotOutput("scatterPlot1")
)
)
),
###############################
tabPanel("Vaccination vs. COVID Deaths",
fluidPage(
titlePanel("Correlation Between Vaccination Indicator and COVID-19 Death"),
# Main panel for displaying outputs
mainPanel(
plotOutput("scatterPlot2")
)
)
),
),
# Define the server
server = function(input, output) {
# Create the interactive world map
output$distPlot <- renderGirafe({
ggiraph(code = print(worldMaps(df, world_data, input$data_type, input$period)))
})
# Change the choices for the second selection on the basis of the input to the first selection
output$secondSelection <- renderUI({
choice_second <- as.list(unique(df$Period[which(df$DataType == input$data_type)]))
selectInput(inputId = "period", choices = choice_second,
label = "Choose the period for which you want to see the data:")
})
output$scatterPlot1 <- renderPlot({
ggplot(data(), aes(x = covid_death_with_policy$testing_policy,
y = covid_death_with_policy$death_per_m)) +
geom_point() +
theme_minimal() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
ggtitle("Testing Policy vs. COVID-19 Deaths per million") +
xlab("Testing Policy") +
ylab("Deaths per million")
})
output$scatterPlot2 <- renderPlot({
ggplot(data(), aes(x = covid_death_with_policy$vaccination_policy,
y = covid_death_with_policy$death_per_m)) +
geom_point() +
theme_minimal() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
ggtitle("Vaccination Policy vs. COVID-19 Deaths per million")
xlab("Vaccination Policy") +
ylab("Deaths per million")
})
},
options = list(height = 600)
)
library(shiny)
library(ggiraph)
shinyApp(
ui = navbarPage("COVID-19 Data",
tabPanel("World Map",
fluidPage(
# App title
titlePanel("Monthly COVID-19 Cases and Deaths Data"),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# First input: Type of data
selectInput(inputId = "data_type",
label = "Choose the type of COVID-19 data you want to see:",
choices = list("Cases in ten thousands" = "Cases in ten thousands", "Deaths in thousands" = "Deaths in thousands")),
# Second input (choices depend on the choice for the first input)
uiOutput("secondSelection"),
),
# Main panel for displaying outputs
mainPanel(
girafeOutput("distPlot")
)
)
)
),
###############################
tabPanel("Testing vs. COVID-19 Deaths",
fluidPage(
titlePanel("Correlation Between Testing Indicator and COVID-19 Death"),
# Main panel for displaying outputs
mainPanel(
plotOutput("scatterPlot1")
)
)
),
###############################
tabPanel("Vaccination vs. COVID-19 Deaths",
fluidPage(
titlePanel("Correlation Between Vaccination Indicator and COVID-19 Death"),
# Main panel for displaying outputs
mainPanel(
plotOutput("scatterPlot2")
)
)
),
),
# Define the server
server = function(input, output) {
# Create the interactive world map
output$distPlot <- renderGirafe({
ggiraph(code = print(worldMaps(df, world_data, input$data_type, input$period)))
})
# Change the choices for the second selection on the basis of the input to the first selection
output$secondSelection <- renderUI({
choice_second <- as.list(unique(df$Period[which(df$DataType == input$data_type)]))
selectInput(inputId = "period", choices = choice_second,
label = "Choose the period for which you want to see the data:")
})
output$scatterPlot1 <- renderPlot({
ggplot(data(), aes(x = covid_death_with_policy$testing_policy,
y = covid_death_with_policy$death_per_m)) +
geom_point() +
theme_minimal() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
xlab("Testing Policy") +
ylab("Deaths per million")
})
output$scatterPlot2 <- renderPlot({
ggplot(data(), aes(x = covid_death_with_policy$vaccination_policy,
y = covid_death_with_policy$death_per_m)) +
geom_point() +
theme_minimal() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
xlab("Vaccination Policy") +
ylab("Deaths per million")
})
},
options = list(height = 600)
)
library(shiny)
library(ggiraph)
shinyApp(
ui = navbarPage("COVID-19 Data",
tabPanel("World Map",
fluidPage(
# App title
titlePanel("Monthly COVID-19 Cases and Deaths Data"),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# First input: Type of data
selectInput(inputId = "data_type",
label = "Choose the type of COVID-19 data you want to see:",
choices = list("Cases in ten thousands" = "Cases in ten thousands", "Deaths in thousands" = "Deaths in thousands")),
# Second input (choices depend on the choice for the first input)
uiOutput("secondSelection"),
),
# Main panel for displaying outputs
mainPanel(
girafeOutput("distPlot")
)
)
)
),
###############################
tabPanel("Testing vs. COVID-19 Deaths",
fluidPage(
titlePanel("Correlation Between Testing Indicator and COVID-19 Death"),
# Main panel for displaying outputs
mainPanel(
plotOutput("scatterPlot1")
)
)
),
###############################
tabPanel("Vaccination vs. COVID-19 Deaths",
fluidPage(
titlePanel("Correlation Between Vaccination Indicator and COVID-19 Death"),
# Main panel for displaying outputs
mainPanel(
plotOutput("scatterPlot2")
)
)
),
),
# Define the server
server = function(input, output) {
# Create the interactive world map
output$distPlot <- renderGirafe({
ggiraph(code = print(worldMaps(df, world_data, input$data_type, input$period)))
})
# Change the choices for the second selection on the basis of the input to the first selection
output$secondSelection <- renderUI({
choice_second <- as.list(unique(df$Period[which(df$DataType == input$data_type)]))
selectInput(inputId = "period", choices = choice_second,
label = "Choose the period for which you want to see the data:")
})
output$scatterPlot1 <- renderPlot({
ggplot(covid_death_with_policy, aes(x = testing_policy,
y = death_per_m)) +
geom_point() +
theme_minimal() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
xlab("Testing Policy") +
ylab("Deaths per million")
})
output$scatterPlot2 <- renderPlot({
ggplot(covid_death_with_policy, aes(x = vaccination_policy,
y = death_per_m)) +
geom_point() +
theme_minimal() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
xlab("Vaccination Policy") +
ylab("Deaths per million")
})
},
options = list(height = 600)
)
library(shiny)
library(ggiraph)
shinyApp(
ui = navbarPage("COVID-19 Data",
tabPanel("World Map",
fluidPage(
# App title
titlePanel("Monthly COVID-19 Cases and Deaths Data"),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# First input: Type of data
selectInput(inputId = "data_type",
label = "Choose the type of COVID-19 data you want to see:",
choices = list("Cases in ten thousands" = "Cases in ten thousands", "Deaths in thousands" = "Deaths in thousands")),
# Second input (choices depend on the choice for the first input)
uiOutput("secondSelection"),
),
# Main panel for displaying outputs
mainPanel(
girafeOutput("distPlot")
)
)
)
),
###############################
tabPanel("Testing vs. COVID-19 Deaths",
fluidPage(
titlePanel("Correlation Between Testing Indicator and COVID-19 Death"),
# Main panel for displaying outputs
mainPanel(
plotOutput("scatterPlot1")
)
)
),
###############################
tabPanel("Vaccination vs. COVID-19 Deaths",
fluidPage(
titlePanel("Correlation Between Vaccination Indicator and COVID-19 Death"),
# Main panel for displaying outputs
mainPanel(
plotOutput("scatterPlot2")
)
)
),
),
# Define the server
server = function(input, output) {
# Create the interactive world map
output$distPlot <- renderGirafe({
ggiraph(code = print(worldMaps(df, world_data, input$data_type, input$period)))
})
# Change the choices for the second selection on the basis of the input to the first selection
output$secondSelection <- renderUI({
choice_second <- as.list(unique(df$Period[which(df$DataType == input$data_type)]))
selectInput(inputId = "period", choices = choice_second,
label = "Choose the period for which you want to see the data:")
})
output$scatterPlot1 <- renderPlot({
ggplot(covid_death_with_policy, aes(x = testing_policy,
y = death_per_m)) +
geom_point() +
theme_minimal() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
xlab("Testing Policy") +
ylab("Deaths per Million")
})
output$scatterPlot2 <- renderPlot({
ggplot(covid_death_with_policy, aes(x = vaccination_policy,
y = death_per_m)) +
geom_point() +
theme_minimal() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
xlab("Vaccination Policy") +
ylab("Deaths per Million")
})
},
options = list(height = 600)
)
library(shiny); runApp('Individual_project.R')
View(world_pop_data_clean)
View(world_pop_data_clean)
View(gov_re_data)
runApp('Individual_project.R')
runApp('Individual_project.R')
runApp('Individual_project.R')
runApp('Individual_project.R')
library(shiny); runApp('Individual_project.R')
print(log)
print(log)
print(logdf)
source("D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Log/chart.R", echo=TRUE)
getwd()
setwd("D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project")
source("D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Log/chart.R", echo=TRUE)
source("D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Log/chart.R", echo=TRUE)
setwd(""D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Log")
setwd(D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Log")
setwd("D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Log")
source("D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Log/chart.R", echo=TRUE)
source("D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Log/chart.R", echo=TRUE)
logdf <- logdf %>%
mutate(Date = substr(Time, 1, 10)) %>%
mutate(Duration = substr(Time, 12))
source("D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Log/chart.R", echo=TRUE)
rlang::last_trace()
rlang::last_trace(drop = FALSE)
source("D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Log/chart.R", echo=TRUE)
library(shiny)
library(magrittr)
library(rvest)
library(readxl)
library(plyr)
library(dplyr)
library(maps)
library(ggplot2)
library(reshape2)
library(shiny)
library(ggiraph)
library(RColorBrewer)
library(countrycode)
library(wbstats)
library(tidyr)
library(rsconnect)
library(lubridate)
logdf <- read.csv('./log.csv')
logdf <- logdf %>%
mutate(Date = substr(Time, 1, 10)) %>%
mutate(Duration = substr(Time, 12))
logdf <- logdf %>%
mutate(Date = substr(Time, 1, 10)) %>%
mutate(Duration = substr(Time, 12, 29))
library(magrittr)
library(rvest)
library(readxl)
library(plyr)
library(dplyr)
library(maps)
library(ggplot2)
library(reshape2)
library(shiny)
library(ggiraph)
library(RColorBrewer)
library(countrycode)
library(wbstats)
library(tidyr)
library(rsconnect)
library(lubridate)
logdf <- read.csv('./log.csv')
logdf <- logdf %>%
mutate(Date = substr(Time, 1, 10)) %>%
mutate(Duration = substr(Time, 12, 29))
print(logdf)
library(magrittr)
library(rvest)
library(readxl)
library(plyr)
library(dplyr)
library(maps)
library(ggplot2)
library(reshape2)
library(shiny)
library(ggiraph)
library(RColorBrewer)
library(countrycode)
library(wbstats)
library(tidyr)
library(rsconnect)
library(lubridate)
logdf <- read.csv('./log.csv')
logdf <- logdf %>%
mutate(Date = substr(Time, 1, 10)) %>%
mutate(Duration = substr(Time, 12, 26))
print(logdf)
library(magrittr)
library(rvest)
library(readxl)
library(plyr)
library(dplyr)
library(maps)
library(ggplot2)
library(reshape2)
library(shiny)
library(ggiraph)
library(RColorBrewer)
library(countrycode)
library(wbstats)
library(tidyr)
library(rsconnect)
library(lubridate)
logdf <- read.csv('./log.csv')
logdf <- logdf %>%
mutate(Date = substr(Time, 1, 10),
Start_hr = substr(Time, 12, 13),
Start_min = substr(Time, 15, 16)) #%>%
#mutate(Duration = substr(Time, 12, 26))
print(logdf)
source("D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Log/chart.R", echo=TRUE)
library(magrittr)
library(rvest)
library(readxl)
library(plyr)
library(dplyr)
library(maps)
library(ggplot2)
library(reshape2)
library(shiny)
library(ggiraph)
library(RColorBrewer)
library(countrycode)
library(wbstats)
library(tidyr)
library(rsconnect)
library(lubridate)
logdf <- read.csv('./log.csv')
logdf <- logdf %>%
mutate(Date = substr(Time, 1, 10),
Start_hr = substr(Time, 12, 13),
Start_min = substr(Time, 15, 16),
End_hr = substr(Time, 20, 21),
End_min = substr(Time, 23, 24)) #%>%
#mutate(Duration = substr(Time, 12, 26))
print(logdf)
source("D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Log/chart.R", echo=TRUE)
source("D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Log/chart.R", echo=TRUE)
source("D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Log/chart.R", echo=TRUE)
source("D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Log/chart.R", echo=TRUE)
source("D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Log/chart.R", echo=TRUE)
source("D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Log/chart.R", echo=TRUE)
source("D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Log/chart.R", echo=TRUE)
source("D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Log/chart.R", echo=TRUE)
# barplot(logdf$Date, names.arg=logdf$Duration ,xlab="Date",ylab="Duration(hr)",col="grey",
#         main="Dates and hours Worked on the Project",)
source("D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Log/chart.R", echo=TRUE)
source("D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Log/chart.R", echo=TRUE)
source("D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Log/chart.R", echo=TRUE)
logdf <- read.csv('./log.csv')
logdf <- read.csv('./log.csv')
logdf <- logdf %>%
mutate(Date = substr(Time, 1, 10),
Start_hr = as.numeric(substr(Time, 12, 13)),
Start_min = as.numeric(substr(Time, 15, 16)),
End_hr = as.numeric(substr(Time, 20, 21)),
End_min = as.numeric(substr(Time, 23, 24))) %>%
mutate(Duration = (End_hr - Start_hr) + (End_min - Start_min)/60)
print(logdf)
barplot(logdf$Date, names.arg=logdf$Duration ,xlab="Date",ylab="Duration(hr)",col="grey",
main="Dates and hours Worked on the Project")
barplot(logdf$Duration, names.arg=logdf$Date ,xlab="Date",ylab="Duration(hr)",col="grey",
main="Dates and hours Worked on the Project")
barplot(logdf$Duration, names.arg=logdf$Date ,xlab="Date", ylab="Duration(hr)", col="grey",
main="Dates and hours Worked on the Project", las=2)
logdf <- read.csv('./log.csv')
logdf <- logdf %>%
mutate(Date = substr(Time, 1, 10),
Start_hr = as.numeric(substr(Time, 12, 13)),
Start_min = as.numeric(substr(Time, 15, 16)),
End_hr = as.numeric(substr(Time, 20, 21)),
End_min = as.numeric(substr(Time, 23, 24))) %>%
mutate(Duration = (End_hr - Start_hr) + (End_min - Start_min)/60)
print(logdf)
barplot(logdf$Duration, names.arg=logdf$Date ,xlab="Date", ylab="Duration(hr)", col="grey",
main="Dates and hours Worked on the Project", las=2)
source("D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Log/chart.R", echo=TRUE)
logdf <- logdf %>%
mutate(Date = substr(Time, 6, 10),
Start_hr = as.numeric(substr(Time, 12, 13)),
Start_min = as.numeric(substr(Time, 15, 16)),
End_hr = as.numeric(substr(Time, 20, 21)),
End_min = as.numeric(substr(Time, 23, 24))) %>%
mutate(Duration = (End_hr - Start_hr) + (End_min - Start_min)/60)
print(logdf)
logdf <- read.csv('./log.csv')
logdf <- logdf %>%
mutate(Date = substr(Time, 6, 10),
Start_hr = as.numeric(substr(Time, 12, 13)),
Start_min = as.numeric(substr(Time, 15, 16)),
End_hr = as.numeric(substr(Time, 20, 21)),
End_min = as.numeric(substr(Time, 23, 24))) %>%
mutate(Duration = (End_hr - Start_hr) + (End_min - Start_min)/60)
print(logdf)
par(cex.axis=0.7)
barplot(logdf$Duration, names.arg=logdf$Date ,xlab="Date", ylab="Duration(hr)", col="grey",
main="Dates and hours Worked on the Project", las=2)
source("D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Log/chart.R", echo=TRUE)
par(cex.axis=0.7)
source("D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Log/chart.R", echo=TRUE)
source("D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Log/chart.R", echo=TRUE)
source("D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Log/chart.R", echo=TRUE)
logdf <- read.csv('./log.csv')
logdf <- logdf %>%
mutate(Date = substr(Time, 6, 10),
Start_hr = as.numeric(substr(Time, 12, 13)),
Start_min = as.numeric(substr(Time, 15, 16)),
End_hr = as.numeric(substr(Time, 20, 21)),
End_min = as.numeric(substr(Time, 23, 24))) %>%
mutate(Duration = (End_hr - Start_hr) + (End_min - Start_min)/60)
source("D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Log/chart.R", echo=TRUE)
