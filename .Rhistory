sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# First input: Type of data
selectInput(inputId = "data_type",
label = "Choose the type of data you want to see:",
choices = list("Monthly new cases" = "monthly_new_cases",
"Monthly new deaths" = "monthly_new_deaths")),
# Second input (choices depend on the choice for the first input)
uiOutput("secondSelection"),
# # Third input (choices depend on the choice for the first and second input)
# uiOutput("thirdSelection")
),
# Main panel for displaying outputs
mainPanel(
# Hide errors
tags$style(type = "text/css",
".shiny-output-error { visibility: hidden; }",
".shiny-output-error:before { visibility: hidden; }"),
# Output: interactive world map
girafeOutput("distPlot")
)
)
),
# Define the server
server = function(input, output) {
# Create the interactive world map
output$distPlot <- renderGirafe({
ggiraph(code = print(worldMaps(monthly_covid_data, world_data, input$data_type, input$month)))
})
# Change the choices for the second selection on the basis of the input to the first selection
output$secondSelection <- renderUI({
choice_second <- as.list(unique(monthly_covid_data$month[which(monthly_covid_data$data_type == input$data_type)]))
selectInput(inputId = "month", choices = choice_second,
label = "Choose the month for which you want to see the data:")
})
# # Change the choices for the third selection on the basis of the input to the first and second selections
# output$thirdSelection <- renderUI({
#   lab <- ifelse(input$data_type == "Childlessness", "age group", "indicator")
#   choice_third <- as.list(unique(df$Indicator[df$DataType == input$data_type & df$Period == input$period]))
#   selectInput(inputId = "indicator", choices = choice_third,
#               label = paste0("Choose the type of ", lab, " you want to explore:"))
# })
},
options = list(height = 600)
)
knitr::opts_chunk$set(echo = TRUE)
if(!require(magrittr)) install.packages("magrittr", repos = "http://cran.us.r-project.org")
if(!require(rvest)) install.packages("rvest", repos = "http://cran.us.r-project.org")
if(!require(readxl)) install.packages("readxl", repos = "http://cran.us.r-project.org")
if(!require(plyr)) install.packages("plyr", repos = "http://cran.us.r-project.org")
if(!require(dplyr)) install.packages("dplyr", repos = "http://cran.us.r-project.org")
if(!require(maps)) install.packages("maps", repos = "http://cran.us.r-project.org")
if(!require(ggplot2)) install.packages("ggplot2", repos = "http://cran.us.r-project.org")
if(!require(reshape2)) install.packages("reshape2", repos = "http://cran.us.r-project.org")
if(!require(shiny)) install.packages("shiny", repos = "http://cran.us.r-project.org")
if(!require(ggiraph)) install.packages("ggiraph", repos = "http://cran.us.r-project.org")
if(!require(RColorBrewer)) install.packages("RColorBrewer", repos = "http://cran.us.r-project.org")
if(!require(countrycode)) install.packages("countrycode", repos = "http://cran.us.r-project.org")
if(!require(wbstats)) install.packages("wbstats", repos = "http://cran.us.r-project.org")
if(!require(tidyr)) install.packages("tidyr", repos = "http://cran.us.r-project.org")
world_covid_data <- read.csv('./Dataset/full_data.csv')
world_pop_data <- read.csv('./Dataset/master_location_pop_table.csv')
gov_re_data <- read.csv('./Dataset/OxCGRT_latest.csv')
#colnames(gov_re_data)
library(magrittr)
library(rvest)
library(countrycode)
iso_codes = countrycode::codelist[, c("un.name.en", "iso3c")]
names(iso_codes) = c("Country", "ISO3")
library(maps)
library(ggplot2)
world_data <- ggplot2::map_data('world')
world_data <- fortify(world_data)
world_data["ISO3"] <- iso_codes$ISO3[match(world_data$region, iso_codes$Country)]
#processing world_pop_data
world_pop_data_clean <- world_pop_data %>%
#select(-c(country_alpha_3_code:county_fips_number, data_source_name, geo_location)) %>%
group_by(country_short_name) %>%
summarise(geo_latitude = mean(geo_latitude),
geo_longitude = mean(geo_longitude),
geo_region_population_count = sum(geo_region_population_count)) %>%
rename('country' = 'country_short_name')
# Only kept 'geo_latitude', 'geo_longitude' and 'geo_region_population_count', all changed to national level. Other data excluded.
####################
#processing world_covid_data
total_covid_death <- world_covid_data %>%
group_by(location) %>%
reframe(total_deaths = sum(new_deaths, na.rm = TRUE)) %>%
rename('country' = 'location')
total_covid_death[total_covid_death == 0] <- NA
# the total number of death for each country
monthly_new_covid <- world_covid_data %>%
mutate(month = paste(substr(date, 1, 4),
substr(date, 6, 7),
sep = '')) %>%
group_by(location, month) %>%
reframe(monthly_new_cases = sum(new_cases, na.rm = TRUE),
monthly_new_deaths = sum(new_deaths, na.rm = TRUE)) %>%
rename('region' = 'location')
monthly_new_covid[monthly_new_covid == 0] <- NA
# new cases and new death are adjusted to monthly level with 'location' and 'month', other numbers all excluded.
# this data frame still contain data at levels other than national. These data will keep remain here until I match the 'location' in in this data frame with 'country_short_name' in world_pop_data_clean. 'location' not included in 'country_short_name' will be excluded since latitude and longitude are required to plot the global map.
####################
#processing gov_re_data
gov_policies_eval <- gov_re_data %>%
group_by(CountryName) %>%
reframe(testing_policy = mean(H2_Testing.policy, na.rm = TRUE),
vaccination_policy = mean(H7_Vaccination.policy, na.rm = TRUE)) %>%
rename('country' = 'CountryName')
gov_policies_eval[gov_policies_eval == 0] <- NA
# I arbitrarily choose only to look at the effects of testing policy and vaccination policy for each country.
####################
#All 'country' in each data frame should match, 'country' not existed in 'world_pop_data_clean' will be excluded
# In 'total_covid_death', exclude observations that has 'country' not in 'world_pop_data_clean'
total_covid_death <- total_covid_death %>%
filter(country %in% world_pop_data_clean$country)
# In 'monthly_new_covid', exclude observations that has 'country' not in 'world_pop_data_clean'
monthly_new_covid <- monthly_new_covid %>%
filter(region %in% world_data$region)
# In 'gov_policies_eval', exclude observations that has 'country' not in 'world_pop_data_clean'
gov_policies_eval <- gov_policies_eval %>%
filter(country %in% world_pop_data_clean$country)
# Feed back all the three cleaned data sets to 'world_pop_data_clean' so all four data sets have identical 'country' entries
world_pop_data_clean <- world_pop_data_clean %>%
filter(country %in% gov_policies_eval$country) %>%
filter(country %in% total_covid_death$country)
# create a new data frame named covid_death_with_policy that have total_covid_death and gov_policies_evalcombined
covid_death_with_policy <- total_covid_death %>%
# Adding in world_pop_data_clean
merge(world_pop_data_clean, by = 'country') %>%
# Adding in gov_policies_eval
merge(gov_policies_eval, by = 'country') %>%
# Death are adjusted to death per million
mutate(death_per_m = (total_deaths/geo_region_population_count)*1000000) %>%
filter(not(death_per_m %in% Inf)) %>%
# Exclude useless columns
select(-c(total_deaths, geo_region_population_count, geo_latitude, geo_longitude)) %>%
# Rounding decimals to increase readability
mutate(across(where(is.numeric), ~round(., 2))) %>%
mutate(death_per_m = round(.$death_per_m, 0))
####################
# create a new data frame about monthly covid death and cases
monthly_covid_data <- monthly_new_covid %>%
# Adding in world_pop_data_clean
# merge(world_pop_data_clean, by = 'country') %>%
# # Exclude useless columns
# select(-c(geo_region_population_count)) %>%
# # Rounding decimals
# mutate(geo_latitude = round(.$geo_latitude, 2)) %>%
# mutate(geo_longitude = round(.$geo_longitude, 2)) %>%
pivot_longer(cols = c('monthly_new_cases', 'monthly_new_deaths'), names_to = 'data_type')
monthly_covid_data['ISO3'] <- iso_codes$ISO3[match(monthly_covid_data$region, iso_codes$Country)]
# Until now, all data processing have ended. All data frames are cleans.
# The two of them I will be using to draw plots are 'monthly_covid_data' and 'covid_death_with_policy'
worldMaps <- function(monthly_covid_data, world_data, data_type, month){
# Function for setting the aesthetics of the plot
my_theme <- function () {
theme_bw() + theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "bottom",
panel.border = element_blank(),
strip.background = element_rect(fill = 'white', colour = 'white'))
}
# Select only the data that the user has selected to view
plotdf <- monthly_covid_data[monthly_covid_data$data_type == data_type & monthly_covid_data$month == month]
plotdf <- plotdf[!is.na(plotdf$ISO3), ]
# Add the data the user wants to see to the geographical world data
world_data['data_type'] <- rep(data_type, nrow(world_data))
world_data['month'] <- rep(month, nrow(world_data))
world_data['value'] <- plotdf$value[match(world_data$ISO3, plotdf$ISO3)]
# Create caption with the data source to show underneath the map
capt <- paste0("Source: data.world")
# Specify the plot for the world map
library(RColorBrewer)
library(ggiraph)
g <- ggplot() +
geom_polygon_interactive(data = subset(world_data, lat >= -60 & lat <= 90), color = 'gray70', size = 0.1,
aes(x = long, y = lat, fill = Value, group = group,
tooltip = sprintf("%s<br/>%s", ISO3, Value))) +
scale_fill_gradientn(colours = brewer.pal(5, "RdBu"), na.value = 'white') +
labs(fill = data_type, color = data_type, title = NULL, x = NULL, y = NULL, caption = capt) +
my_theme()
return(g)
}
library(shiny)
library(ggiraph)
shinyApp(
# Define the UI
ui = fluidPage(
# App title
titlePanel("Monthly COVID-19 Cases and Deaths"),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# First input: Type of data
selectInput(inputId = "data_type",
label = "Choose the type of data you want to see:",
choices = list("Monthly new cases" = "monthly_new_cases",
"Monthly new deaths" = "monthly_new_deaths")),
# Second input (choices depend on the choice for the first input)
uiOutput("secondSelection"),
# # Third input (choices depend on the choice for the first and second input)
# uiOutput("thirdSelection")
),
# Main panel for displaying outputs
mainPanel(
# Hide errors
tags$style(type = "text/css",
".shiny-output-error { visibility: hidden; }",
".shiny-output-error:before { visibility: hidden; }"),
# Output: interactive world map
girafeOutput("distPlot")
)
)
),
# Define the server
server = function(input, output) {
# Create the interactive world map
output$distPlot <- renderGirafe({
ggiraph(code = print(worldMaps(monthly_covid_data, world_data, input$data_type, input$month)))
})
# Change the choices for the second selection on the basis of the input to the first selection
output$secondSelection <- renderUI({
choice_second <- as.list(unique(monthly_covid_data$month[which(monthly_covid_data$data_type == input$data_type)]))
selectInput(inputId = "month", choices = choice_second,
label = "Choose the month for which you want to see the data:")
})
# # Change the choices for the third selection on the basis of the input to the first and second selections
# output$thirdSelection <- renderUI({
#   lab <- ifelse(input$data_type == "Childlessness", "age group", "indicator")
#   choice_third <- as.list(unique(df$Indicator[df$DataType == input$data_type & df$Period == input$period]))
#   selectInput(inputId = "indicator", choices = choice_third,
#               label = paste0("Choose the type of ", lab, " you want to explore:"))
# })
},
options = list(height = 600)
)
knitr::opts_chunk$set(echo = TRUE)
if(!require(magrittr)) install.packages("magrittr", repos = "http://cran.us.r-project.org")
if(!require(rvest)) install.packages("rvest", repos = "http://cran.us.r-project.org")
if(!require(readxl)) install.packages("readxl", repos = "http://cran.us.r-project.org")
if(!require(plyr)) install.packages("plyr", repos = "http://cran.us.r-project.org")
if(!require(dplyr)) install.packages("dplyr", repos = "http://cran.us.r-project.org")
if(!require(maps)) install.packages("maps", repos = "http://cran.us.r-project.org")
if(!require(ggplot2)) install.packages("ggplot2", repos = "http://cran.us.r-project.org")
if(!require(reshape2)) install.packages("reshape2", repos = "http://cran.us.r-project.org")
if(!require(shiny)) install.packages("shiny", repos = "http://cran.us.r-project.org")
if(!require(ggiraph)) install.packages("ggiraph", repos = "http://cran.us.r-project.org")
if(!require(RColorBrewer)) install.packages("RColorBrewer", repos = "http://cran.us.r-project.org")
if(!require(countrycode)) install.packages("countrycode", repos = "http://cran.us.r-project.org")
if(!require(wbstats)) install.packages("wbstats", repos = "http://cran.us.r-project.org")
library(magrittr)
library(rvest)
library(countrycode)
iso_codes = countrycode::codelist[, c("un.name.en", "iso3c")]
names(iso_codes) = c("Country", "ISO3")
head(iso_codes)
library(readxl)
# url <- "https://www.un.org/en/development/desa/population/publications/dataset/fertility/wfr2012/Data/Data_Sources/TABLE%20A.8.%20%20Percentage%20of%20childless%20women%20and%20women%20with%20parity%20three%20or%20higher.xlsx"
# download.file(url, destfile)
destfile <- "TABLE A.8.  Percentage of childless women and women with parity three or higher.xlsx"
childlessness_data <- read_xlsx(destfile)
head(childlessness_data)
cols <- which(grepl("childless", childlessness_data[2, ]))
childlessness_data <- childlessness_data[-c(1:3), c(1, 3, cols:(cols + 2))]
names(childlessness_data) <- c("Country", "Period", "35-39", "40-44", "45-49")
head(childlessness_data)
library(wbstats)
library(plyr)
library(dplyr)
library(wbstats)
library(plyr)
library(dplyr)
# List the gender-relevant data sets from the World Bank
datasets = wb_search("gender", fields = c("indicator"))
# Try to load these relevant data sets into R
df_list = list()
for (i in 1:nrow(datasets)){
print(i)
df_list[[i]] <- tryCatch(
{ df = wb_data(datasets$indicator_id[i], start_date = 2000, end_date = 2020) },
error=function(cond) { return(NULL) }
)
}
# Remove the NULL data sets (returning an error from the World Bank API)
df_list = df_list[which(!unlist(lapply(df_list, is.null)))]
# Define the identification columns
id.cols = c("iso2c", "iso3c", "country", "date","unit", "obs_status", "footnote", "last_updated")
# Make sure the gender index data for each indicator are in a
# similar format as the other data to be used (as well as
# previous versions of these data)
recent_df_list = list()
for (i in 1:length(df_list)){
# Rename columns into relevant names
ind_idx = !names(df_list[[i]]) %in% id.cols
ind_nam = names(df_list[[i]])[ind_idx]
df_list[[i]]["Indicator"] = ind_nam
names(df_list[[i]])[ind_idx] = "Value"
missing_cols = id.cols[!id.cols %in% names(df_list[[i]])]
if (length(missing_cols) > 0){
for (j in 1:length(missing_cols)){
df_list[[i]][missing_cols[j]] = NA
}
}
# Add the most recent observations separately
recent_rows = as.data.frame(df_list[[i]] %>%
dplyr::filter(!is.na(Value) & !is.na(date)) %>%
dplyr::group_by(iso3c) %>%
dplyr::arrange(date, .by_group = T) %>%
dplyr::slice(tail(row_number(), 1)))
if (nrow(recent_rows) > 0){
recent_rows["date"] = "RecentYear"
df_list[[i]]$date = as.character(df_list[[i]]$date)
recent_df_list[[i]] = rbind(as.data.frame(df_list[[i]]), recent_rows)
}
}
# Rename columns to make them compatible with childlessness data
# and previous versions of these gender index data
gender_index_melt = rbind.fill(recent_df_list)
gender_index_melt$Indicator = datasets$indicator[match(gender_index_melt$Indicator, datasets$indicator_id)]
names(gender_index_melt)[names(gender_index_melt) == "country"] = "Country"
names(gender_index_melt)[names(gender_index_melt) == "iso3c"] = "ISO3"
names(gender_index_melt)[names(gender_index_melt) == "date"] = "Period"
keep_cols = c("ISO3", "Country", "Period", "Indicator", "Value")
gender_index_melt = gender_index_melt[, names(gender_index_melt) %in% keep_cols]
library(maps)
library(ggplot2)
world_data <- ggplot2::map_data('world')
world_data <- fortify(world_data)
head(world_data)
old_names <- c("Bolivia (Plurinational State of)", "Cabo Verde", "China, Hong Kong Special Administrative Region",
"China, Macao Special Administrative Region", "Congo", "Democratic People's Republic of Korea",
"Democratic Republic of the Congo", "Iran (Islamic Republic of)", "Lao People's Democratic Republic",
"Micronesia (Federated States of)", "Republic of Korea", "Republic of Moldova", "Saint Vincent and the Grenadines",
"State of Palestine", "Syrian Arab Republic", "The former Yugoslav Republic of Macedonia",
"United Kingdom of Great Britain and Northern Ireland", "United Republic of Tanzania",
"United States Virgin Islands", "Venezuela (Bolivarian Republic of)")
new_names <- c("Bolivia", "Cape Verde", "Hong Kong, SAR China", "Macao, SAR China", "Congo (Brazzaville)",
"Korea (North)", "Congo, (Kinshasa)", "Iran, Islamic Republic of", "Lao PDR", "Micronesia, Federated States of",
"Korea (South)", "Moldova", "Saint Vincent and Grenadines", "Palestinian Territory", "Syrian Arab Republic (Syria)",
"Macedonia, Republic of", "United Kingdom", "Tanzania, United Republic of", "Virgin Islands, US", "Venezuela (Bolivarian Republic)")
for (i in 1:length(old_names)){
childlessness_data$Country[childlessness_data$Country == old_names[i]] <- new_names[i]
}
old_names <- c("French Southern and Antarctic Lands", "Antigua", "Barbuda", "Saint Barthelemy", "Brunei", "Ivory Coast",
"Democratic Republic of the Congo", "Republic of Congo", "Falkland Islands", "Micronesia", "UK",
"Heard Island", "Cocos Islands", "Iran", "Nevis", "Saint Kitts", "South Korea", "Laos", "Saint Martin",
"Macedonia", "Pitcairn Islands", "North Korea", "Palestine", "Russia", "South Sandwich Islands",
"South Georgia", "Syria", "Trinidad", "Tobago", "Taiwan", "Tanzania", "USA", "Vatican", "Grenadines",
"Saint Vincent", "Venezuela", "Vietnam", "Wallis and Fortuna")
new_names <- c("French Southern Territories", rep("Antigua and Barbuda", 2), "Saint-Barthélemy",
"Brunei Darussalam", "Côte d'Ivoire", "Congo, (Kinshasa)", "Congo (Brazzaville)",
"Falkland Islands (Malvinas)", "Micronesia, Federated States of", "United Kingdom",
"Heard and Mcdonald Islands", "Cocos (Keeling) Islands", "Iran, Islamic Republic of",
rep("Saint Kitts and Nevis", 2), "Korea (South)", "Lao PDR", "Saint-Martin (French part)",
"Macedonia, Republic of", "Pitcairn", "Korea (North)", "Palestinian Territory", "Russian Federation",
rep("South Georgia and the South Sandwich Islands", 2),
"Syrian Arab Republic (Syria)", rep("Trinidad and Tobago", 2), "Taiwan, Republic of China",
"Tanzania, United Republic of", "United States of America", "Holy See (Vatican City State)",
rep("Saint Vincent and Grenadines", 2), "Venezuela (Bolivarian Republic)", "Viet Nam", "Wallis and Futuna Islands")
for (i in 1:length(old_names)){
world_data$region[world_data$region == old_names[i]] <- new_names[i]
}
childlessness_data['ISO3'] <- iso_codes$ISO3[match(childlessness_data$Country, iso_codes$Country)]
world_data["ISO3"] <- iso_codes$ISO3[match(world_data$region, iso_codes$Country)]
library(reshape2)
childlessness_melt <- melt(childlessness_data, id = c("Country", "ISO3", "Period"),
variable.name = "Indicator", value.name = "Value")
childlessness_melt$Value <- as.numeric(childlessness_melt$Value)
childlessness_melt["DataType"] <- rep("Childlessness", nrow(childlessness_melt))
gender_index_melt["DataType"] <- rep("Gender Gap Index", nrow(gender_index_melt))
df <- rbind(childlessness_melt, gender_index_melt)
df[] <- lapply(df, as.character)
df$Value <- as.numeric(df$Value)
worldMaps <- function(df, world_data, data_type, period, indicator){
# Function for setting the aesthetics of the plot
my_theme <- function () {
theme_bw() + theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "bottom",
panel.border = element_blank(),
strip.background = element_rect(fill = 'white', colour = 'white'))
}
# Select only the data that the user has selected to view
plotdf <- df[df$Indicator == indicator & df$DataType == data_type & df$Period == period,]
plotdf <- plotdf[!is.na(plotdf$ISO3), ]
# Add the data the user wants to see to the geographical world data
world_data['DataType'] <- rep(data_type, nrow(world_data))
world_data['Period'] <- rep(period, nrow(world_data))
world_data['Indicator'] <- rep(indicator, nrow(world_data))
world_data['Value'] <- plotdf$Value[match(world_data$ISO3, plotdf$ISO3)]
# Create caption with the data source to show underneath the map
capt <- paste0("Source: ", ifelse(data_type == "Childlessness", "United Nations" , "World Bank"))
# Specify the plot for the world map
library(RColorBrewer)
library(ggiraph)
g <- ggplot() +
geom_polygon_interactive(data = subset(world_data, lat >= -60 & lat <= 90), color = 'gray70', size = 0.1,
aes(x = long, y = lat, fill = Value, group = group,
tooltip = sprintf("%s<br/>%s", ISO3, Value))) +
scale_fill_gradientn(colours = brewer.pal(5, "RdBu"), na.value = 'white') +
labs(fill = data_type, color = data_type, title = NULL, x = NULL, y = NULL, caption = capt) +
my_theme()
return(g)
}
library(shiny)
library(ggiraph)
shinyApp(
# Define the UI
ui = fluidPage(
# App title
titlePanel("Childlessness and Gender Gap Index Data"),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# First input: Type of data
selectInput(inputId = "data_type",
label = "Choose the type of data you want to see:",
choices = list("Childlessness" = "Childlessness", "Gender Gap Index" = "Gender Gap Index")),
# Second input (choices depend on the choice for the first input)
uiOutput("secondSelection"),
# Third input (choices depend on the choice for the first and second input)
uiOutput("thirdSelection")
),
# Main panel for displaying outputs
mainPanel(
# Hide errors
tags$style(type = "text/css",
".shiny-output-error { visibility: hidden; }",
".shiny-output-error:before { visibility: hidden; }"),
# Output: interactive world map
girafeOutput("distPlot")
)
)
),
# Define the server
server = function(input, output) {
# Create the interactive world map
output$distPlot <- renderGirafe({
ggiraph(code = print(worldMaps(df, world_data, input$data_type, input$period, input$indicator)))
})
# Change the choices for the second selection on the basis of the input to the first selection
output$secondSelection <- renderUI({
choice_second <- as.list(unique(df$Period[which(df$DataType == input$data_type)]))
selectInput(inputId = "period", choices = choice_second,
label = "Choose the period for which you want to see the data:")
})
# Change the choices for the third selection on the basis of the input to the first and second selections
output$thirdSelection <- renderUI({
lab <- ifelse(input$data_type == "Childlessness", "age group", "indicator")
choice_third <- as.list(unique(df$Indicator[df$DataType == input$data_type & df$Period == input$period]))
selectInput(inputId = "indicator", choices = choice_third,
label = paste0("Choose the type of ", lab, " you want to explore:"))
})
},
options = list(height = 600)
)
shiny::runApp('D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Implementation')
runApp('D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Implementation')
library(shiny); runApp('D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Implementation/Individual_project.R')
runApp('D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Implementation/Individual_project.R')
library(shiny); runApp('D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Implementation/Individual_project.R')
runApp('D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Implementation/Individual_project.R')
runApp('D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Implementation/Individual_project.R')
runApp('D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Implementation/Individual_project.R')
runApp('D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Implementation/Individual_project.R')
runApp('D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Implementation/Individual_project.R')
runApp('D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Implementation/Individual_project.R')
runApp('D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Implementation/Individual_project.R')
runApp('D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Implementation/Individual_project.R')
runApp('D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Implementation/Individual_project.R')
runApp('D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Implementation/Individual_project.R')
source("D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Implementation/Individual_project.R", echo=TRUE)
source("D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Implementation/Individual_project.R", echo=TRUE)
runApp('D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Implementation/Individual_project.R')
runApp('D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Implementation/Individual_project.R')
runApp('D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Implementation/Individual_project.R')
runApp('D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Implementation/Individual_project.R')
runApp('D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Implementation/Individual_project.R')
runApp('D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Implementation/Individual_project.R')
runApp('D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Implementation/Individual_project.R')
runApp('D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Implementation/Individual_project.R')
log <- read.csv('log.csv')
log <- read.csv('./log.csv')
log <- read.csv('./log.csv')
getwd()
getwd()
log <- read.csv('./log.csv')
log <- read.csv('./log.csv')
getwd()
log <- read.csv('./log.csv')
getwd()
runApp('D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project/Implementation/Individual_project.R')
getwd()
setwd()
setwd('D:/OneDrive - Grinnell College/2023FA/CSC-324/CSC-324-Individual-Project')
runApp('Implementation/Individual_project.R')
getwd()
runApp('Implementation/Individual_project.R')
getwd()
runApp('Implementation/Individual_project.R')
