vaccination_policy = mean(H7_Vaccination.policy, na.rm = TRUE))
#processing world_pop_data
world_pop_data_clean <- world_pop_data %>%
#select(-c(country_alpha_3_code:county_fips_number, data_source_name, geo_location)) %>%
group_by(country_short_name) %>%
summarise(geo_latitude = mean(geo_latitude),
geo_longitude = mean(geo_longitude),
geo_region_population_count = sum(geo_region_population_count))
# Only kept 'geo_latitude', 'geo_longitude' and 'geo_region_population_count', all changed to national level. Other data excluded.
#processing world_covid_data
#colnames(world_covid_data)
total_covid_death <- world_covid_data %>%
group_by(location) %>%
reframe(total_deaths = sum(new_deaths, na.rm = TRUE))
total_covid_death[total_covid_death == 0] <- NA
# the total number of death for each country
monthly_new_covid <- world_covid_data %>%
mutate(month = paste(substr(date, 1, 4),
substr(date, 6, 7),
sep = '')) %>%
group_by(location, month) %>%
reframe(monthly_new_cases = sum(new_cases, na.rm = TRUE),
monthly_new_deaths = sum(new_deaths, na.rm = TRUE))
colnames()[location] = 'country'
#processing world_pop_data
world_pop_data_clean <- world_pop_data %>%
#select(-c(country_alpha_3_code:county_fips_number, data_source_name, geo_location)) %>%
group_by(country_short_name) %>%
summarise(geo_latitude = mean(geo_latitude),
geo_longitude = mean(geo_longitude),
geo_region_population_count = sum(geo_region_population_count))
# Only kept 'geo_latitude', 'geo_longitude' and 'geo_region_population_count', all changed to national level. Other data excluded.
#processing world_covid_data
#colnames(world_covid_data)
total_covid_death <- world_covid_data %>%
group_by(location) %>%
reframe(total_deaths = sum(new_deaths, na.rm = TRUE))
total_covid_death[total_covid_death == 0] <- NA
# the total number of death for each country
monthly_new_covid <- world_covid_data %>%
mutate(month = paste(substr(date, 1, 4),
substr(date, 6, 7),
sep = '')) %>%
group_by(location, month) %>%
reframe(monthly_new_cases = sum(new_cases, na.rm = TRUE),
monthly_new_deaths = sum(new_deaths, na.rm = TRUE)) %>%
colnames()[location] = 'country'
#processing world_pop_data
world_pop_data_clean <- world_pop_data %>%
#select(-c(country_alpha_3_code:county_fips_number, data_source_name, geo_location)) %>%
group_by(country_short_name) %>%
summarise(geo_latitude = mean(geo_latitude),
geo_longitude = mean(geo_longitude),
geo_region_population_count = sum(geo_region_population_count))
# Only kept 'geo_latitude', 'geo_longitude' and 'geo_region_population_count', all changed to national level. Other data excluded.
#processing world_covid_data
#colnames(world_covid_data)
total_covid_death <- world_covid_data %>%
group_by(location) %>%
reframe(total_deaths = sum(new_deaths, na.rm = TRUE))
total_covid_death[total_covid_death == 0] <- NA
# the total number of death for each country
monthly_new_covid <- world_covid_data %>%
mutate(month = paste(substr(date, 1, 4),
substr(date, 6, 7),
sep = '')) %>%
group_by(location, month) %>%
reframe(monthly_new_cases = sum(new_cases, na.rm = TRUE),
monthly_new_deaths = sum(new_deaths, na.rm = TRUE))
monthly_new_covid[monthly_new_covid == 0] <- NA
# new cases amd new death are adjusted to monthly level with 'location' and 'month', other numbers all excluded.
# this data frame still contain data at levels other than national. These data will keep remain here until I match the 'location' in in this data frame with 'country_short_name' in world_pop_data_clean. 'location' not included in 'country_short_name' will be excluded since latitude and longitude are required to plot the global map.
#processing gov_re_data
gov_policies_eval <- gov_re_data %>%
mutate(month = (substr(Date, 1, 6))) %>%
group_by(CountryName, month) %>%
reframe(testing_policy = mean(H2_Testing.policy, na.rm = TRUE),
vaccination_policy = mean(H7_Vaccination.policy, na.rm = TRUE)) %>%
colnames()[CountryName] = 'country'
#processing world_pop_data
world_pop_data_clean <- world_pop_data %>%
#select(-c(country_alpha_3_code:county_fips_number, data_source_name, geo_location)) %>%
group_by(country_short_name) %>%
summarise(geo_latitude = mean(geo_latitude),
geo_longitude = mean(geo_longitude),
geo_region_population_count = sum(geo_region_population_count))
# Only kept 'geo_latitude', 'geo_longitude' and 'geo_region_population_count', all changed to national level. Other data excluded.
#processing world_covid_data
#colnames(world_covid_data)
total_covid_death <- world_covid_data %>%
group_by(location) %>%
reframe(total_deaths = sum(new_deaths, na.rm = TRUE))
total_covid_death[total_covid_death == 0] <- NA
# the total number of death for each country
monthly_new_covid <- world_covid_data %>%
mutate(month = paste(substr(date, 1, 4),
substr(date, 6, 7),
sep = '')) %>%
group_by(location, month) %>%
reframe(monthly_new_cases = sum(new_cases, na.rm = TRUE),
monthly_new_deaths = sum(new_deaths, na.rm = TRUE)) %>%
names()[location] = 'country'
#processing world_pop_data
world_pop_data_clean <- world_pop_data %>%
#select(-c(country_alpha_3_code:county_fips_number, data_source_name, geo_location)) %>%
group_by(country_short_name) %>%
summarise(geo_latitude = mean(geo_latitude),
geo_longitude = mean(geo_longitude),
geo_region_population_count = sum(geo_region_population_count))
# Only kept 'geo_latitude', 'geo_longitude' and 'geo_region_population_count', all changed to national level. Other data excluded.
#processing world_covid_data
#colnames(world_covid_data)
total_covid_death <- world_covid_data %>%
group_by(location) %>%
reframe(total_deaths = sum(new_deaths, na.rm = TRUE))
total_covid_death[total_covid_death == 0] <- NA
# the total number of death for each country
monthly_new_covid <- world_covid_data %>%
mutate(month = paste(substr(date, 1, 4),
substr(date, 6, 7),
sep = '')) %>%
group_by(location, month) %>%
reframe(monthly_new_cases = sum(new_cases, na.rm = TRUE),
monthly_new_deaths = sum(new_deaths, na.rm = TRUE)) %>%
names()[location] = "country"
#processing world_pop_data
world_pop_data_clean <- world_pop_data %>%
#select(-c(country_alpha_3_code:county_fips_number, data_source_name, geo_location)) %>%
group_by(country_short_name) %>%
summarise(geo_latitude = mean(geo_latitude),
geo_longitude = mean(geo_longitude),
geo_region_population_count = sum(geo_region_population_count))
# Only kept 'geo_latitude', 'geo_longitude' and 'geo_region_population_count', all changed to national level. Other data excluded.
#processing world_covid_data
#colnames(world_covid_data)
total_covid_death <- world_covid_data %>%
group_by(location) %>%
reframe(total_deaths = sum(new_deaths, na.rm = TRUE))
total_covid_death[total_covid_death == 0] <- NA
# the total number of death for each country
monthly_new_covid <- world_covid_data %>%
mutate(month = paste(substr(date, 1, 4),
substr(date, 6, 7),
sep = '')) %>%
group_by(location, month) %>%
reframe(monthly_new_cases = sum(new_cases, na.rm = TRUE),
monthly_new_deaths = sum(new_deaths, na.rm = TRUE))
names(monthly_new_covid)[location] = "country"
#processing world_pop_data
world_pop_data_clean <- world_pop_data %>%
#select(-c(country_alpha_3_code:county_fips_number, data_source_name, geo_location)) %>%
group_by(country_short_name) %>%
summarise(geo_latitude = mean(geo_latitude),
geo_longitude = mean(geo_longitude),
geo_region_population_count = sum(geo_region_population_count))
# Only kept 'geo_latitude', 'geo_longitude' and 'geo_region_population_count', all changed to national level. Other data excluded.
#processing world_covid_data
#colnames(world_covid_data)
total_covid_death <- world_covid_data %>%
group_by(location) %>%
reframe(total_deaths = sum(new_deaths, na.rm = TRUE))
total_covid_death[total_covid_death == 0] <- NA
# the total number of death for each country
monthly_new_covid <- world_covid_data %>%
mutate(month = paste(substr(date, 1, 4),
substr(date, 6, 7),
sep = '')) %>%
group_by(location, month) %>%
reframe(monthly_new_cases = sum(new_cases, na.rm = TRUE),
monthly_new_deaths = sum(new_deaths, na.rm = TRUE)) %>%
rename('country' = 'location')
monthly_new_covid[monthly_new_covid == 0] <- NA
# new cases and new death are adjusted to monthly level with 'location' and 'month', other numbers all excluded.
# this data frame still contain data at levels other than national. These data will keep remain here until I match the 'location' in in this data frame with 'country_short_name' in world_pop_data_clean. 'location' not included in 'country_short_name' will be excluded since latitude and longitude are required to plot the global map.
#processing gov_re_data
gov_policies_eval <- gov_re_data %>%
mutate(month = (substr(Date, 1, 6))) %>%
group_by(CountryName, month) %>%
reframe(testing_policy = mean(H2_Testing.policy, na.rm = TRUE),
vaccination_policy = mean(H7_Vaccination.policy, na.rm = TRUE)) %>%
colnames()[CountryName] = 'country'
#processing world_pop_data
world_pop_data_clean <- world_pop_data %>%
#select(-c(country_alpha_3_code:county_fips_number, data_source_name, geo_location)) %>%
group_by(country_short_name) %>%
summarise(geo_latitude = mean(geo_latitude),
geo_longitude = mean(geo_longitude),
geo_region_population_count = sum(geo_region_population_count))
# Only kept 'geo_latitude', 'geo_longitude' and 'geo_region_population_count', all changed to national level. Other data excluded.
#processing world_covid_data
#colnames(world_covid_data)
total_covid_death <- world_covid_data %>%
group_by(location) %>%
reframe(total_deaths = sum(new_deaths, na.rm = TRUE))
total_covid_death[total_covid_death == 0] <- NA
# the total number of death for each country
monthly_new_covid <- world_covid_data %>%
mutate(month = paste(substr(date, 1, 4),
substr(date, 6, 7),
sep = '')) %>%
group_by(location, month) %>%
reframe(monthly_new_cases = sum(new_cases, na.rm = TRUE),
monthly_new_deaths = sum(new_deaths, na.rm = TRUE)) %>%
rename('country' = 'location')
monthly_new_covid[monthly_new_covid == 0] <- NA
# new cases and new death are adjusted to monthly level with 'location' and 'month', other numbers all excluded.
# this data frame still contain data at levels other than national. These data will keep remain here until I match the 'location' in in this data frame with 'country_short_name' in world_pop_data_clean. 'location' not included in 'country_short_name' will be excluded since latitude and longitude are required to plot the global map.
#processing gov_re_data
gov_policies_eval <- gov_re_data %>%
mutate(month = (substr(Date, 1, 6))) %>%
group_by(CountryName, month) %>%
reframe(testing_policy = mean(H2_Testing.policy, na.rm = TRUE),
vaccination_policy = mean(H7_Vaccination.policy, na.rm = TRUE)) %>%
rename('country' = 'CountryName')
gov_policies_eval[gov_policies_eval == 0] <- NA
View(gov_policies_eval)
#processing world_pop_data
world_pop_data_clean <- world_pop_data %>%
#select(-c(country_alpha_3_code:county_fips_number, data_source_name, geo_location)) %>%
group_by(country_short_name) %>%
summarise(geo_latitude = mean(geo_latitude),
geo_longitude = mean(geo_longitude),
geo_region_population_count = sum(geo_region_population_count))
# Only kept 'geo_latitude', 'geo_longitude' and 'geo_region_population_count', all changed to national level. Other data excluded.
#processing world_covid_data
#colnames(world_covid_data)
total_covid_death <- world_covid_data %>%
group_by(location) %>%
reframe(total_deaths = sum(new_deaths, na.rm = TRUE))
total_covid_death[total_covid_death == 0] <- NA
# the total number of death for each country
monthly_new_covid <- world_covid_data %>%
mutate(month = paste(substr(date, 1, 4),
substr(date, 6, 7),
sep = '')) %>%
group_by(location, month) %>%
reframe(monthly_new_cases = sum(new_cases, na.rm = TRUE),
monthly_new_deaths = sum(new_deaths, na.rm = TRUE)) %>%
rename('country' = 'location')
monthly_new_covid[monthly_new_covid == 0] <- NA
# new cases and new death are adjusted to monthly level with 'location' and 'month', other numbers all excluded.
# this data frame still contain data at levels other than national. These data will keep remain here until I match the 'location' in in this data frame with 'country_short_name' in world_pop_data_clean. 'location' not included in 'country_short_name' will be excluded since latitude and longitude are required to plot the global map.
#processing gov_re_data
gov_policies_eval <- gov_re_data %>%
group_by(CountryName) %>%
reframe(testing_policy = mean(H2_Testing.policy, na.rm = TRUE),
vaccination_policy = mean(H7_Vaccination.policy, na.rm = TRUE)) %>%
rename('country' = 'CountryName')
gov_policies_eval[gov_policies_eval == 0] <- NA
View(total_covid_death)
#processing world_pop_data
world_pop_data_clean <- world_pop_data %>%
#select(-c(country_alpha_3_code:county_fips_number, data_source_name, geo_location)) %>%
group_by(country_short_name) %>%
summarise(geo_latitude = mean(geo_latitude),
geo_longitude = mean(geo_longitude),
geo_region_population_count = sum(geo_region_population_count))
# Only kept 'geo_latitude', 'geo_longitude' and 'geo_region_population_count', all changed to national level. Other data excluded.
#processing world_covid_data
#colnames(world_covid_data)
total_covid_death <- world_covid_data %>%
group_by(location) %>%
reframe(total_deaths = sum(new_deaths, na.rm = TRUE)) %>%
rename('country' = 'location')
total_covid_death[total_covid_death == 0] <- NA
# the total number of death for each country
monthly_new_covid <- world_covid_data %>%
mutate(month = paste(substr(date, 1, 4),
substr(date, 6, 7),
sep = '')) %>%
group_by(location, month) %>%
reframe(monthly_new_cases = sum(new_cases, na.rm = TRUE),
monthly_new_deaths = sum(new_deaths, na.rm = TRUE)) %>%
rename('country' = 'location')
monthly_new_covid[monthly_new_covid == 0] <- NA
# new cases and new death are adjusted to monthly level with 'location' and 'month', other numbers all excluded.
# this data frame still contain data at levels other than national. These data will keep remain here until I match the 'location' in in this data frame with 'country_short_name' in world_pop_data_clean. 'location' not included in 'country_short_name' will be excluded since latitude and longitude are required to plot the global map.
#processing gov_re_data
gov_policies_eval <- gov_re_data %>%
group_by(CountryName) %>%
reframe(testing_policy = mean(H2_Testing.policy, na.rm = TRUE),
vaccination_policy = mean(H7_Vaccination.policy, na.rm = TRUE)) %>%
rename('country' = 'CountryName')
gov_policies_eval[gov_policies_eval == 0] <- NA
View(gov_policies_eval)
View(gov_re_data)
View(monthly_new_covid)
View(total_covid_death)
View(world_pop_data_clean)
comparedf(monthly_new_covid, world_pop_data_clean)
knitr::opts_chunk$set(echo = TRUE)
#importing libraries
library(dplyr)
library(magrittr)
library(tidyr)
library(formatR)
library(stringr)
library(arsenal)
install.packages("arsenal")
library(arsenal)
comparedf(monthly_new_covid, world_pop_data_clean)
summary(comparedf(monthly_new_covid, world_pop_data_clean))
#processing world_pop_data
world_pop_data_clean <- world_pop_data %>%
#select(-c(country_alpha_3_code:county_fips_number, data_source_name, geo_location)) %>%
group_by(country_short_name) %>%
summarise(geo_latitude = mean(geo_latitude),
geo_longitude = mean(geo_longitude),
geo_region_population_count = sum(geo_region_population_count)) %>%
rename('country' = 'country_short_name')
# Only kept 'geo_latitude', 'geo_longitude' and 'geo_region_population_count', all changed to national level. Other data excluded.
#processing world_covid_data
#colnames(world_covid_data)
total_covid_death <- world_covid_data %>%
group_by(location) %>%
reframe(total_deaths = sum(new_deaths, na.rm = TRUE)) %>%
rename('country' = 'location')
total_covid_death[total_covid_death == 0] <- NA
# the total number of death for each country
monthly_new_covid <- world_covid_data %>%
mutate(month = paste(substr(date, 1, 4),
substr(date, 6, 7),
sep = '')) %>%
group_by(location, month) %>%
reframe(monthly_new_cases = sum(new_cases, na.rm = TRUE),
monthly_new_deaths = sum(new_deaths, na.rm = TRUE)) %>%
rename('country' = 'location')
monthly_new_covid[monthly_new_covid == 0] <- NA
# new cases and new death are adjusted to monthly level with 'location' and 'month', other numbers all excluded.
# this data frame still contain data at levels other than national. These data will keep remain here until I match the 'location' in in this data frame with 'country_short_name' in world_pop_data_clean. 'location' not included in 'country_short_name' will be excluded since latitude and longitude are required to plot the global map.
#processing gov_re_data
gov_policies_eval <- gov_re_data %>%
group_by(CountryName) %>%
reframe(testing_policy = mean(H2_Testing.policy, na.rm = TRUE),
vaccination_policy = mean(H7_Vaccination.policy, na.rm = TRUE)) %>%
rename('country' = 'CountryName')
gov_policies_eval[gov_policies_eval == 0] <- NA
# I arbitrarily choose only to look at the effects of testing policy and vaccination policy for each country.
# All the data points are is in terms of people will be divided by the population at that country to get the ratio.
total_covid_death$country %in% world_pop_data_clean$country
# processing gov_re_data and total_covid_death will be combined based on country name to see if there exists correlation between policies taken and the actual results(evaluated by number of death)
# All the data points are is in terms of people will be divided by the population at that country to get the ratio.
total_covid_death$country %in% world_pop_data_clean$country
total_covid_death <- total_covid_death %>%
filter(country %in% world_pop_data_clean$country)
# processing gov_re_data and total_covid_death will be combined based on country name to see if there exists correlation between policies taken and the actual results(evaluated by number of death)
View(total_covid_death)
#processing world_pop_data
world_pop_data_clean <- world_pop_data %>%
#select(-c(country_alpha_3_code:county_fips_number, data_source_name, geo_location)) %>%
group_by(country_short_name) %>%
summarise(geo_latitude = mean(geo_latitude),
geo_longitude = mean(geo_longitude),
geo_region_population_count = sum(geo_region_population_count)) %>%
rename('country' = 'country_short_name')
# Only kept 'geo_latitude', 'geo_longitude' and 'geo_region_population_count', all changed to national level. Other data excluded.
#processing world_covid_data
#colnames(world_covid_data)
total_covid_death <- world_covid_data %>%
group_by(location) %>%
reframe(total_deaths = sum(new_deaths, na.rm = TRUE)) %>%
rename('country' = 'location')
total_covid_death[total_covid_death == 0] <- NA
# the total number of death for each country
monthly_new_covid <- world_covid_data %>%
mutate(month = paste(substr(date, 1, 4),
substr(date, 6, 7),
sep = '')) %>%
group_by(location, month) %>%
reframe(monthly_new_cases = sum(new_cases, na.rm = TRUE),
monthly_new_deaths = sum(new_deaths, na.rm = TRUE)) %>%
rename('country' = 'location')
monthly_new_covid[monthly_new_covid == 0] <- NA
# new cases and new death are adjusted to monthly level with 'location' and 'month', other numbers all excluded.
# this data frame still contain data at levels other than national. These data will keep remain here until I match the 'location' in in this data frame with 'country_short_name' in world_pop_data_clean. 'location' not included in 'country_short_name' will be excluded since latitude and longitude are required to plot the global map.
#processing gov_re_data
gov_policies_eval <- gov_re_data %>%
group_by(CountryName) %>%
reframe(testing_policy = mean(H2_Testing.policy, na.rm = TRUE),
vaccination_policy = mean(H7_Vaccination.policy, na.rm = TRUE)) %>%
rename('country' = 'CountryName')
gov_policies_eval[gov_policies_eval == 0] <- NA
# I arbitrarily choose only to look at the effects of testing policy and vaccination policy for each country.
#processing world_pop_data
world_pop_data_clean <- world_pop_data %>%
#select(-c(country_alpha_3_code:county_fips_number, data_source_name, geo_location)) %>%
group_by(country_short_name) %>%
summarise(geo_latitude = mean(geo_latitude),
geo_longitude = mean(geo_longitude),
geo_region_population_count = sum(geo_region_population_count)) %>%
rename('country' = 'country_short_name')
# Only kept 'geo_latitude', 'geo_longitude' and 'geo_region_population_count', all changed to national level. Other data excluded.
#processing world_covid_data
#colnames(world_covid_data)
total_covid_death <- world_covid_data %>%
group_by(location) %>%
reframe(total_deaths = sum(new_deaths, na.rm = TRUE)) %>%
rename('country' = 'location')
total_covid_death[total_covid_death == 0] <- NA
# the total number of death for each country
monthly_new_covid <- world_covid_data %>%
mutate(month = paste(substr(date, 1, 4),
substr(date, 6, 7),
sep = '')) %>%
group_by(location, month) %>%
reframe(monthly_new_cases = sum(new_cases, na.rm = TRUE),
monthly_new_deaths = sum(new_deaths, na.rm = TRUE)) %>%
rename('country' = 'location')
monthly_new_covid[monthly_new_covid == 0] <- NA
# new cases and new death are adjusted to monthly level with 'location' and 'month', other numbers all excluded.
# this data frame still contain data at levels other than national. These data will keep remain here until I match the 'location' in in this data frame with 'country_short_name' in world_pop_data_clean. 'location' not included in 'country_short_name' will be excluded since latitude and longitude are required to plot the global map.
#processing gov_re_data
gov_policies_eval <- gov_re_data %>%
group_by(CountryName) %>%
reframe(testing_policy = mean(H2_Testing.policy, na.rm = TRUE),
vaccination_policy = mean(H7_Vaccination.policy, na.rm = TRUE)) %>%
rename('country' = 'CountryName')
gov_policies_eval[gov_policies_eval == 0] <- NA
# I arbitrarily choose only to look at the effects of testing policy and vaccination policy for each country.
#All 'country' in each data frame should match, not existed in world_pop_data_clean will be excluded
total_covid_death <- total_covid_death %>%
filter(country %in% world_pop_data_clean$country)
# All the data points are is in terms of people will be divided by the population at that country to get the ratio.
# processing gov_re_data and total_covid_death will be combined based on country name to see if there exists correlation between policies taken and the actual results(evaluated by number of death)
#All 'country' in each data frame should match, not existed in world_pop_data_clean will be excluded
total_covid_death <- total_covid_death %>%
filter(country %in% world_pop_data_clean$country)
monthly_new_covid <- monthly_new_covid %>%
filter(country %in% world_pop_data_clean$country)
# All the data points are is in terms of people will be divided by the population at that country to get the ratio.
# processing gov_re_data and total_covid_death will be combined based on country name to see if there exists correlation between policies taken and the actual results(evaluated by number of death)
#All 'country' in each data frame should match, not existed in world_pop_data_clean will be excluded
total_covid_death <- total_covid_death %>%
filter(country %in% world_pop_data_clean$country)
monthly_new_covid <- monthly_new_covid %>%
filter(country %in% world_pop_data_clean$country)
gov_policies_eval <- gov_policies_eval %>%
filter(country %in% world_pop_data_clean$country)
# All the data points are is in terms of people will be divided by the population at that country to get the ratio.
# processing gov_re_data and total_covid_death will be combined based on country name to see if there exists correlation between policies taken and the actual results(evaluated by number of death)
#processing world_pop_data
world_pop_data_clean <- world_pop_data %>%
#select(-c(country_alpha_3_code:county_fips_number, data_source_name, geo_location)) %>%
group_by(country_short_name) %>%
summarise(geo_latitude = mean(geo_latitude),
geo_longitude = mean(geo_longitude),
geo_region_population_count = sum(geo_region_population_count)) %>%
rename('country' = 'country_short_name')
# Only kept 'geo_latitude', 'geo_longitude' and 'geo_region_population_count', all changed to national level. Other data excluded.
#processing world_covid_data
#colnames(world_covid_data)
total_covid_death <- world_covid_data %>%
group_by(location) %>%
reframe(total_deaths = sum(new_deaths, na.rm = TRUE)) %>%
rename('country' = 'location')
total_covid_death[total_covid_death == 0] <- NA
# the total number of death for each country
monthly_new_covid <- world_covid_data %>%
mutate(month = paste(substr(date, 1, 4),
substr(date, 6, 7),
sep = '')) %>%
group_by(location, month) %>%
reframe(monthly_new_cases = sum(new_cases, na.rm = TRUE),
monthly_new_deaths = sum(new_deaths, na.rm = TRUE)) %>%
rename('country' = 'location')
monthly_new_covid[monthly_new_covid == 0] <- NA
# new cases and new death are adjusted to monthly level with 'location' and 'month', other numbers all excluded.
# this data frame still contain data at levels other than national. These data will keep remain here until I match the 'location' in in this data frame with 'country_short_name' in world_pop_data_clean. 'location' not included in 'country_short_name' will be excluded since latitude and longitude are required to plot the global map.
#processing gov_re_data
gov_policies_eval <- gov_re_data %>%
group_by(CountryName) %>%
reframe(testing_policy = mean(H2_Testing.policy, na.rm = TRUE),
vaccination_policy = mean(H7_Vaccination.policy, na.rm = TRUE)) %>%
rename('country' = 'CountryName')
gov_policies_eval[gov_policies_eval == 0] <- NA
# I arbitrarily choose only to look at the effects of testing policy and vaccination policy for each country.
#All 'country' in each data frame should match, not existed in world_pop_data_clean will be excluded
total_covid_death <- total_covid_death %>%
filter(country %in% world_pop_data_clean$country)
monthly_new_covid <- monthly_new_covid %>%
filter(country %in% world_pop_data_clean$country)
gov_policies_eval <- gov_policies_eval %>%
filter(country %in% world_pop_data_clean$country)
# All the data points are is in terms of people will be divided by the population at that country to get the ratio.
# processing gov_re_data and total_covid_death will be combined based on country name to see if there exists correlation between policies taken and the actual results(evaluated by number of death)
View(gov_policies_eval)
View(gov_re_data)
View(monthly_new_covid)
View(total_covid_death)
View(world_pop_data_clean)
#All 'country' in each data frame should match, not existed in world_pop_data_clean will be excluded
total_covid_death <- total_covid_death %>%
filter(country %in% world_pop_data_clean$country)
monthly_new_covid <- monthly_new_covid %>%
filter(country %in% world_pop_data_clean$country)
gov_policies_eval <- gov_policies_eval %>%
filter(country %in% world_pop_data_clean$country)
world_pop_data_clean <- world_pop_data_clean %>%
filter(country %in% gov_policies_eval$country) %>%
filter(country %in% monthly_new_covid$country) %>%
filter(country %in% total_covid_death$country)
# All the data points are is in terms of people will be divided by the population at that country to get the ratio.
# processing gov_re_data and total_covid_death will be combined based on country name to see if there exists correlation between policies taken and the actual results(evaluated by number of death)
knitr::opts_chunk$set(echo = TRUE)
#importing libraries
library(dplyr)
library(magrittr)
library(tidyr)
library(formatR)
library(stringr)
library(arsenal)
?mtcars
